
实现了一个简单文件系统'easy-fs'，即支持以文件为单位来组织磁盘中的一系列数据信息，支持以文件名来访问文件，并且能够根据文件地址来访问对应的数据。  
sys-open接口的功能是根据文件名找到对应的文件，并且将该文件的访问权限交给进程，返回值是该文件的文件描述符。sys-write和sys-read接口的功能分别是进程通过打开文件时得到的文件描述符fd将文件写或者读到用户的buf数组中（涉及到地址映射），参数为fd,buf,读写长度len，返回值是实际读写长度。sys-close功能为关闭进程对文件描述符为fd的文件的访问权限。  

磁盘、操作系统和进程对文件的读写访问的结构和方法。  
    我们假设在磁盘中存放着一种结构DiskInode,我们只需要找到这个结构并且把它读入内存来分析，就可以获取这个文件的全部信息，并且可以通过随机访问的方式去访问文件的任意一个位置的内容，DiskInode被组织在外存中的一块叫DiskInode表的外存区域中，通过编号就可以唯一访问到。DiskInode被存放在磁盘上，我们访问它就需要先把它放入内存中，DiskInode在内存中的结构我们称为inode，通过inode我们可以访问到其对应的DiskInode。因此进程想要获得对文件的访问能力就是要找到文件对应的inode,如果文件的DiskInode还没有被放入内存中，我们需要先将其作为inode缓存到内存中；如果文件的DiskInode已经被放入内存中，我们只需要直接返回其缓存在内存中的inode即可。因为可能有多个进程访问同一个DiskInode,而对应的Inode只有一个，所以在C语言中我们需要添加引用计数，但是在rust中我们只需要让Inode使用rust的Arc封装就可以很好的利用这个智能指针的特性。而每一个进程对文件访问时，都会有一些区别于其他进程的具体特征（例如进程的访问权限，进程当前的读写位置等），所以具体到进程我们同样需要建立一个结构OSInode给每一个进程使用。  
实现了如果我们有了OSInode我们可以进行随机读写。  
通过文件名获取对文件的访问能力，  
